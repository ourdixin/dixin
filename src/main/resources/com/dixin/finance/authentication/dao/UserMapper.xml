<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dixin.finance.authentication.dao.UserMapper">

  <!-- cache / 暂时去掉缓存，等后台可以操作的时候再加上缓存 -->
  
  <insert id="insert" parameterType="com.dixin.finance.authentication.vo.UserVO" useGeneratedKeys = "true" keyProperty = "id" >
    insert into User(
		user_name,
		password,
		user_type,
		enabled,
		reg_date,
		name,
		mobile,
		area_id,
		address,
		zip_code,
		qq,
		id_card,
		account,
		institution_id,
		start_date,
		term,
		auth_type,
		fm_id,
		is_risk_tested,
		create_user,
		create_time,
		update_user,
		update_time)
	values(
		#{userName},
		PASSWORD(#{password}),
		#{userType},
		#{enabled},
		SYSDATE(),
		#{name},
		#{mobile},
		#{areaId},
		#{address},
		#{zipCode},
		#{qq},
		#{idCard},
		#{account},
		#{institutionId},
		#{startDate},
		#{term},
		#{authType},
		#{fmId},
		#{isRiskTested},
		0,
		SYSDATE(),
		0,
		SYSDATE()
	)
  </insert>
    
  <select id="query" parameterType="com.dixin.finance.authentication.vo.UserVO" resultType="com.dixin.finance.authentication.vo.UserVO">
    SELECT 
    	id id,
	    user_name userName,
	    password password,
	    user_type userType,
	    enabled enabled,
	    reg_date regDate,
	    name name,
	    mobile mobile,
	    area_id areaId,
	    address address,
	    zip_code zipCode,
	    qq qq,
	    id_card idCard,
	    account account,
	    institution_id institutionId,
	    start_date startDate,
	    term term,
	    auth_type authType,
	    fm_id fmId,
	    is_risk_tested isRiskTested,
	    create_user createUser,
	    create_time createTime,
	    update_user updateUser,
	    update_time updateTime
	FROM
	    user where user_type!=25  
  </select>
  
  <select id="selectLoginUser" parameterType="map" resultType="com.dixin.finance.authentication.vo.UserVO">
    SELECT 
    	id id,
	    user_name userName,
	    password password,
	    user_type userType,
	    enabled enabled,
	    reg_date regDate,
	    name name,
	    mobile mobile,
	    area_id areaId,
	    address address,
	    zip_code zipCode,
	    qq qq,
	    id_card idCard,
	    account account,
	    institution_id institutionId,
	    start_date startDate,
	    term term,
	    auth_type authType,
	    fm_id fmId,
	    is_risk_tested isRiskTested,
	    create_user createUser,
	    create_time createTime,
	    update_user updateUser,
	    update_time updateTime
	FROM
	    user
	WHERE 
		password=PASSWORD(#{password}) and (user_name = #{userName} or mobile= #{userName} )
  </select>
  
	<!-- 更新用户信息 -->
	<update id="updateUser" parameterType="com.dixin.finance.authentication.vo.UserVO">
		UPDATE user SET 
		<if test="password!=null">
			password=#{password},
		</if>
		<if test="mobile!=null">
			mobile=#{mobile},
		</if>
		<if test="areaId > 0">
			area_id=#{areaId},
		</if>
		<if test="address!=null">
			address=#{address},
		</if>
		<if test="zipCode!=null">
			zip_code=#{zipCode},
		</if>
		<if test="qq!=null">
			qq=#{qq},
		</if>
		<if test="account!=null">
			account=#{account},
		</if>
		<if test="financialInstitution!=null">
			institution_id=#{financialInstitution.id},
		</if>
		<if test="authType > 0">
			auth_type=#{authType},
		</if>
		update_user=0,
		update_time=SYSDATE()
		WHERE id=#{id}
	</update>
  
  
  
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
			DELETE FROM user WHERE id = #{userId}
	</delete>

  	<resultMap id="f_inResult" type="com.dixin.finance.authentication.vo.Financial_institutionVO">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="tel" property="tel"/>
		<result column="info" property="info"/>
	</resultMap>
	
	<resultMap id="areaResult" type="com.dixin.finance.authentication.vo.AreaVO">
		<id column="aid" property="id"/>
		<result column="aname" property="name"/>
	</resultMap>

	<resultMap id="userResult" type="com.dixin.finance.authentication.vo.UserVO">  
		<id column="uid" property="id"/>
		<result column="userName" property="userName"/>
		<result column="password" property="password"/>
		<result column="user_type" property="userType"/>
		<result column="uname" property="name"/>
		<result column="mobile" property="mobile"/>
		<result column="address" property="address"/>
		<result column="zipCode" property="zipCode"/>
		<result column="qq" property="qq"/>
		<result column="account" property="account"/>
		<result column="startDate" property="startDate"/>
		<result column="regDate" property="regDate"/>
		<result column="term" property="term"/>
		<result column="isRiskTested" property="isRiskTested"/>
		<result column="update_user" property="updateUser"/>
		<result column="update_time" property="updateTime"/>
		<association property="financialInstitution" column="institution_id" resultMap="f_inResult"/> 
		<association property="area" column="area_id" resultMap="areaResult"/>  
	</resultMap>  
	
	<!-- 通过id 查找用户 -->
	<select id="findUserById" parameterType="int" resultMap="userResult" useCache="false">
		SELECT 
		u.id uid,
	    u.user_name userName,
	    u.password password,
	    u.user_type userType,
	    u.name uname,
	    u.mobile mobile,
	    u.address address,
	    u.zip_code zipCode,
	    u.qq qq,
	    u.account account,
	    financialInstitution.id id,
	    financialInstitution.name name,
	    financialInstitution.tel tel,
	    area.id aid,
	    area.name aname,
	    u.start_date startDate,
	    u.reg_date regDate,
	    u.term term,
	    u.is_risk_tested isRiskTested
		FROM
	    user u left join financial_institution financialInstitution on u.institution_id = financialInstitution.id 
	    left join area  on u.area_id = area.id 
	    WHERE u.id = #{userId}
	</select>
  	
  	<!-- 更改用户密码 -->
  	<update id="updatePassword" parameterType="map">
  			UPDATE user SET password = PASSWORD(#{password}) WHERE id=#{user_id}
  	</update>
  	
  	<!-- 查找手机号是否存在，并返回用户 -->
  	<select id="existsTel" parameterType="String" resultType="Integer">
  		   SELECT id FROM user WHERE mobile = #{mobile}
  	</select>

  	<!-- 设置用户评测 -->
  	<update id="setRiskTested" parameterType="map">
  			UPDATE user SET is_risk_tested =#{grade} WHERE id=#{user_id}
  	</update>

</mapper>
